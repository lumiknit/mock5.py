# -*- coding: utf-8 -*-
"""mock5/read_record.py

Author: lumiknit (aasr4r4@gmail.com)

Record (generated by gen.cpp) reader for torch
"""
import struct
import torch

def read_bytes(filename):
  with open(filename, "rb") as f:
    return f.read()

def conv_record(X, Y, w, b, index_map, color_map, sc_map):
  left, v = 0, 0
  for i in range(len(b) // 8):
    i0, i1 = struct.unpack("ii", b[i * 8 : (i + 1) * 8])
    if left <= 0:
      z = [torch.ones(w, w, dtype=torch.float),
            torch.zeros(w, w, dtype=torch.float),
            torch.zeros(w, w, dtype=torch.float)]
      bd = torch.stack(z)
      v = 1
      left = i1
    else:
      idx, sc = i0, sc_map(i1 / 10000.0)
      x, y = index_map(idx // w, idx % w)
      bd[0][y][x] = 0
      bd[color_map(v)][y][x] = 1
      X.append(bd.clone())
      Y.append(torch.tensor([sc], dtype=torch.float))
      v = 3 - v
      left -= 1
      #print("--- {}-th => {}".format(i, sc))
      #print(bd)

def id(x): return x
def flip_color(x): return 3 - x
def inv(x): return -x

def make_symm(r, f, w):
  def g(y, x):
    x = x if f == 0 else w - 1 - x
    if r == 1: return w - 1 - x, y
    elif r == 2: return w - 1 - y, w - 1 - x
    elif r == 3: return x, w - 1 - y
    else: return y, x
  return g

def conv_records(w, b):
  X, Y = [], []
  for f in range(2):
    for r in range(4):
      for c, s in [(id, id), (flip_color, inv)]:
        conv_record(X, Y, w, b, make_symm(r, f, w), c, s)
  Xs = torch.stack(X)
  Ys = torch.stack(Y)
  return Xs, Ys

if __name__ == "__main__":
  b = read_bytes("out")
  x, y  = conv_records(11, b)
  print(x.shape, y.shape)
  print(x)
  print(y)
